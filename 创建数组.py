import numpy as np


# 创建数组示例
def main():
    # 传入个一维数组 [1, 2, 3] 进行创建
    a = np.array([1, 2, 3])

    print(a)
    # Output:
    # [1 2 3]

    # 输出类型
    print(type(a))
    # Output:
    # <class 'numpy.ndarray'>

    # 输出数据类型
    print(a.dtype)
    # Output:
    # int64

    # 指定数据类型创建二维数组
    b = np.array([(1, 2, 3), (4, 5, 6)], dtype=float)
    print(b)
    # Output:
    # [[1. 2. 3.]
    #  [4. 5. 6.]]

    # 指定类型创建多维数组
    c = np.array([[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]], dtype=np.float64)
    print(c)
    # Output:
    # [[[ 1.  2.  3.]
    #   [ 4.  5.  6.]]
    #
    #  [[ 7.  8.  9.]
    #   [10. 11. 12.]]]

    # 创建3行4列的零值数组
    d = np.zeros((3, 4))
    print(d)
    # Output:
    # [[0. 0. 0. 0.]
    #  [0. 0. 0. 0.]
    #  [0. 0. 0. 0.]]

    # 指定数据类型创建大小为 (2, 3, 4) 的数组，有2个3行4列的二维数组，数组元素都为1
    e = np.ones((2, 3, 4), dtype=np.int16)
    print(e)
    # Output:
    # [[[1 1 1 1]
    #   [1 1 1 1]
    #   [1 1 1 1]]
    #
    #  [[1 1 1 1]
    #   [1 1 1 1]
    #   [1 1 1 1]]]

    # 生成一个从 10 到 25 之间（不包含 25）的数组，步长为 2
    f = np.arange(10, 25, 2)
    print(f)
    # Output:
    # [10 12 14 16 18 20 22 24]

    # 生成一个等间距的数组，从0到10，一共3个元素
    g = np.linspace(0, 10, 3)
    print(g)
    # Output:
    # [ 0.  5. 10.]

    # 生成一个大小为(2, 3)的数组，所有元素为 8
    h = np.full((2, 3), 8)
    print(h)
    # Output:
    # [[8 8 8]
    #  [8 8 8]]

    # 创建一个 3x3 的单位矩阵（Identity Matrix），即主对角线上的元素为 1，其它位置上的元素为 0
    i = np.eye(3)
    print(i)
    # Output:
    # [[1. 0. 0.]
    #  [0. 1. 0.]
    #  [0. 0. 1.]]

    # 会生成一个形状为 (2, 3) 的二维数组，数组中的元素是从 [0, 1) 范围内均匀分布的随机浮点数。
    j = np.random.random((2, 3))
    print(j)
    # Output:
    # [[0.74370395 0.22808282 0.69982926]
    #  [0.2215952  0.56050013 0.24369917]]

    # 生成一个[1,10)范围内随机整数，大小为(2,3)的数组
    k = np.random.randint(1, 10, (2, 3))
    print(k)
    # Output:
    # [[8 8 4]
    #  [7 9 9]]

    # 生成一个[5, 10)范围内随机数，大小为(2,3)的数组
    m = np.random.uniform(5, 10, (2, 3))
    print(m)
    # Output:
    # [[7.18494051 5.43163317 5.84787178]
    #  [9.11022635 5.69750062 6.98257835]]

    # 创建一个形状为 (3, 4) 的二维数组，但数组中的元素不会被初始化，它们的值是随机的，通常是之前内存中剩余的值
    # np.empty() 通常比 np.zeros() 或 np.ones() 更快，因为它不需要初始化数组中的值
    n = np.empty((3, 4))
    print(n)
    # Output:
    # [[0. 0. 0. 0.]
    #  [0. 0. 0. 0.]
    #  [0. 0. 0. 0.]]


if __name__ == '__main__':
    main()
